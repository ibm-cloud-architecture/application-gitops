apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-build-tag-push
spec:
  workspaces:
    - name: source
      description: The git repo will be cloned onto the volume backing this workspace
      mountPath: $(params.source-dir)
  params:
    - name: url
    - name: revision
      default: master
    - name: source-dir
      default: /source
    - name: image-server
      default: ""
    - name: image-namespace
      default: ""
    - name: image-repository
      default: ""
    - name: image-tag
      default: ""
    - name: BUILDER_IMAGE
      default: registry.redhat.io/rhel9/buildah@sha256:90f06202a0e232d48cb6bab68c2d9f8b3fafe849278e3ac237d154b7458832c7
    - name: DOCKERFILE
      default: ./Dockerfile
    - name: FORMAT
      description: The format of the built container, oci or docker
      default: "oci"
    - name: CONTEXT
      default: .
    - name: TLSVERIFY
      default: "false"
    - name: STORAGE_DRIVER
      description: Set buildah storage driver
      default: vfs
  volumes:
    - name: varlibcontainers
      emptyDir: {}
  steps:
    - name: setup-docker-auth
      image: $(params.BUILDER_IMAGE)
      env:
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: registry-access
              key: REGISTRY_USER
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: registry-access
              key: REGISTRY_PASSWORD
              optional: true
        - name: AUTH_CONFIG
          valueFrom:
            secretKeyRef:
              name: bkribbs15-pull-secret
              key: .dockerconfigjson
              optional: true
        - name: AUTH_CONFIG_OVERRIDE
          valueFrom:
            secretKeyRef:
              name: registry-auth-local
              key: .dockerconfigjson
              optional: true
        - name: IBM_ENTITLED_REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: ibm-entitled-registry-credentials
              key: IBM_ENTITLED_REGISTRY_USER
              optional: true
        - name: IBM_ENTITLED_REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ibm-entitled-registry-credentials
              key: IBM_ENTITLED_REGISTRY_PASSWORD
              optional: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000 
      script: |
        if [[ -n "${AUTH_CONFIG_OVERRIDE}" ]]; then
          AUTH_CONFIG="${AUTH_CONFIG_OVERRIDE}"
        elif [[ -z "${AUTH_CONFIG}" ]]; then
          AUTH_CONFIG="{}"
        fi
        
        AUTH_FILE="/var/lib/containers/auth.json"
        
        echo "${AUTH_CONFIG}" > "${AUTH_FILE}"
        
        if [[ -n "${IBM_ENTITLED_REGISTRY_USER}" ]] && [[ -n "${IBM_ENTITLED_REGISTRY_PASSWORD}" ]]; then
          buildah login --authfile "${AUTH_FILE}" -u ${IBM_ENTITLED_REGISTRY_USER} -p ${IBM_ENTITLED_REGISTRY_PASSWORD} cp.icr.io
          echo "buildah login --authfile \"${AUTH_FILE}\" -u \"${IBM_ENTITLED_REGISTRY_USER}\" -p \"xxxxx\" cp.icr.io"
        fi
        
        if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]] && [[ "$(params.image-server)" != "image-registry.openshift-image-registry.svc:5000"  ]]; then
          buildah login --authfile "${AUTH_FILE}" -u "${REGISTRY_USER}" -p "${REGISTRY_PASSWORD}" "$(params.image-server)"
          echo "buildah login --authfile \"${AUTH_FILE}\" -u \"${REGISTRY_USER}\" -p \"xxxxx\" \"$(params.image-server)\""
        fi
        
        echo "Auth file: ${AUTH_FILE}"
        cat /var/lib/containers/auth.json

    - name: build
      image: $(params.BUILDER_IMAGE)
      workingDir: $(params.source-dir)
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000 
      script: |
        echo "Running as USER ID `id`"

        echo Server - $(params.image-server)
        echo NS - $(params.image-namespace)
        echo Repo - $(params.image-repository)
        echo image tag - $(params.image-tag)

        APP_IMAGE="$(params.image-server)/$(params.image-namespace)/$(params.image-repository):$(params.image-tag)"
        
        echo  App Image - ${APP_IMAGE}

        AUTH_FILE="/var/lib/containers/auth.json"
        echo "Auth file: ${AUTH_FILE}"
        
        set -x
        
        echo "Starting Build"

        buildah --storage-driver=$(params.STORAGE_DRIVER) bud \
          --authfile "${AUTH_FILE}" \
          --format=$(params.FORMAT) --tls-verify=$(params.TLSVERIFY) \
          --no-cache -f $(params.DOCKERFILE) -t ${APP_IMAGE} $(params.CONTEXT)
        echo "Build Done"

        echo "Starting Push"
        buildah --storage-driver=$(params.STORAGE_DRIVER) push \
          --authfile "${AUTH_FILE}" \
          --tls-verify=$(params.TLSVERIFY) \
          --digestfile ./image-digest \
          ${APP_IMAGE} docker://${APP_IMAGE}
