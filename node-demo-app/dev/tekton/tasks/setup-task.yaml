apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: setup-task
  labels:
    version: 1.0.0
spec:
  workspaces:
    - name: source
      description: The git repo will be cloned onto the volume backing this workspace
  params:
    - name: url
      description: The url for the git repository
    - name: revision
      description: The git revision (branch, tag, or sha) that should be built
      default: master
    - name: source-dir
      default: /source
    - name: image-url
      description: The dev image (use image-release for released image)
      default: ""
    - name: image-server
      description: The dev image registry server if params.image-url not provided
      default: ""
    - name: image-namespace
      description: The dev image registry namespace if params.image-url not provided
      default: ""
    - name: image-repository
      description: The dev image registry repository/imagename if params.image-url not provided
      default: ""
    - name: image-tag
      description: The dev image registry tag if params.image-url not provided
      default: ""
    - name: gitops-url
      description: URL for the GitOps Repo 
      default: ""
    - name: gitops-dir
      description: Directory for the GitOps Repo 
      default: ""
    - name: yaml-dir
      description: directory for yaml in the GitOps Repo 
      default: ""
    - name: tools-image
      default: quay.io/cloudnativetoolkit/ibmcloud-dev:v2.1.2
    - name: js-image
      default: quay.io/ibmgaragecloud/node:lts-stretch
  results:
    - name: url
    - name: revision
    - name: source-dir
    - name: image-url
    - name: image-server
    - name: image-namespace
    - name: image-repository
    - name: image-tag
    - name: gitops-url
    - name: gitops-dir
    - name: yaml-dir
    - name: tools-image
    - name: js-image
  steps:
    - name: git-clone
      image: quay.io/ibmgaragecloud/alpine-git
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: password
              optional: true
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: username
              optional: true
        - name: REGISTRY_RELEASE_SERVER
          valueFrom:
            secretKeyRef:
              name: registry-access
              key: REGISTRY_URL
              optional: true
        - name: REGISTRY_RELEASE_NAMESPACE
          valueFrom:
            secretKeyRef:
              name: registry-access
              key: REGISTRY_NAMESPACE
              optional: true
      script: |
        set +x

        cd /workspace/source
        rm -rf lost+found

        if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
            git clone "$(echo $(params.url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.url) | awk -F '://' '{print $2}')" $(workspaces.source.path)
        else
            git clone $(params.url) $(workspaces.source.path)
        fi
        
        cd $(workspaces.source.path)
        git checkout $(params.revision)

        # Results
        # Defaults
        echo -n "$(params.url)">$(results.url.path)
        echo -n "$(git rev-parse --verify HEAD)">$(results.revision.path)
        echo -n "$(params.source-dir)">$(results.source-dir.path)
        echo -n "$(params.tools-image)">$(results.tools-image.path)
        echo -n "$(params.js-image)">$(results.js-image.path)
        echo -n "$(params.gitops-url)">$(results.gitops-url.path)
        echo -n "$(params.gitops-dir)">$(results.gitops-dir.path)
        echo -n "$(params.yaml-dir)">$(results.yaml-dir.path)

        echo 'Hello'
        echo $(params.image-server)
        echo $(params.image-namespace)
        echo $(params.image-repository)
        echo $(params.image-tag)

        REGISTRY_SERVER="$(params.image-server)"
        REGISTRY_NAMESPACE="$(params.image-namespace)"
        REGISTRY_REPOSITORY="$(params.image-repository)"
        REGISTRY_TAG="$(params.image-tag)"


        if [[ -n "$(params.image-url)" ]]; then
          REGISTRY_SERVER_VALUE=$(echo "$(params.image-url)" | awk -F / '{print $1}')
          if [[ -n "${REGISTRY_SERVER_VALUE}" ]]; then
            REGISTRY_SERVER="${REGISTRY_SERVER_VALUE}"
          fi

          REGISTRY_NAMESPACE_VALUE=$(echo "$(params.image-url)" | awk -F / '{print $2}')
          if [[ -n "${REGISTRY_NAMESPACE_VALUE}" ]]; then
            if [[ "${REGISTRY_NAMESPACE_VALUE}" = '$NAMESPACE' ]]; then
              REGISTRY_NAMESPACE=${NAMESPACE}
            else
              REGISTRY_NAMESPACE="${REGISTRY_NAMESPACE_VALUE}"
            fi
          fi

          REGISTRY_REPOSITORY_VALUE=$(echo "$(params.image-url)" | awk -F / '{print $3}' |  awk -F : '{print $1}')
          if [[ -n "${REGISTRY_REPOSITORY_VALUE}" ]]; then
            REGISTRY_REPOSITORY="${REGISTRY_REPOSITORY_VALUE}"
          fi

          REGISTRY_TAG_VALUE=$(echo "$(params.image-url)" | awk -F / '{print $3}' | awk -F : '{print $2}')
          if [[ -n "${REGISTRY_TAG_VALUE}" ]]; then
            REGISTRY_TAG="${REGISTRY_TAG_VALUE}"
          fi
        fi

        if [[ -z "${REGISTRY_SERVER}" ]]; then
          # Assume is internal
          REGISTRY_SERVER="image-registry.openshift-image-registry.svc:5000"
        fi
        if [[ -z "${REGISTRY_NAMESPACE}" ]]; then
          # Assume current k8s namespace
          REGISTRY_NAMESPACE="${NAMESPACE}"
        fi
        if [[ -z "${REGISTRY_REPOSITORY}" ]]; then
          # Assume repo dir is image repository/image-name
          REGISTRY_REPOSITORY="$(basename $(echo -n $(git config --get remote.origin.url)) .git | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')"
        fi
        if [[ -z "${REGISTRY_TAG}" ]]; then
          # Assume short git commit revision
          REGISTRY_TAG="$(git rev-parse --verify HEAD --short)"
        fi
        echo -n "${REGISTRY_SERVER}">$(results.image-server.path)
        echo -n "${REGISTRY_NAMESPACE}">$(results.image-namespace.path)
        echo -n "${REGISTRY_REPOSITORY}">$(results.image-repository.path)
        echo -n "${REGISTRY_TAG}">$(results.image-tag.path)
        echo -n "${REGISTRY_SERVER}/${REGISTRY_NAMESPACE}/${REGISTRY_REPOSITORY}:${REGISTRY_TAG}">$(results.image-url.path)

        if [[ -z "${REGISTRY_RELEASE_NAMESPACE}" ]]; then
          # Assume current k8s namespace
          REGISTRY_RELEASE_NAMESPACE="${NAMESPACE}"
        fi
        if [[ -z "${REGISTRY_RELEASE_SERVER}" ]]; then
          # Assume internal registry
          REGISTRY_RELEASE_SERVER="image-registry.openshift-image-registry.svc:5000"
        fi
        

        for f in /tekton/results/*; do echo "results.$(basename $f)=$(cat $f)"; done